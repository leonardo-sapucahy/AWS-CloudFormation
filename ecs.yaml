AWSTemplateFormatVersion: '2010-09-09'
Description: Template para criação de um cluster ECS completo

Resources:
  # VPC
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVPC"

  # Subnets
  MySubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: "MySubnet1"

  MySubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: "MySubnet2"

  # Internet Gateway
  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"

  # Attach Internet Gateway
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Route Table
  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC

  # Route
  MyRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  # Subnet Route Table Association
  Subnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref MyRouteTable

  Subnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref MyRouteTable

  # Security Group
  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable HTTP access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  # ECS Cluster
  MyECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "MyECSCluster"

  # Task Definition
  MyTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "MyTaskDefinition"
      ContainerDefinitions:
        - Name: "my-container"
          Image: "nginx:latest"
          Memory: 512
          Cpu: 256
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  # ECS Service
  MyECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref MyECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: "EC2"
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref MySubnet1
            - !Ref MySubnet2
          SecurityGroups:
            - !Ref MySecurityGroup
          AssignPublicIp: "ENABLED"
      LoadBalancers:
        - ContainerName: "my-container"
          ContainerPort: 80
          TargetGroupArn: !Ref MyTargetGroup

  # Load Balancer
  MyLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - !Ref MySubnet1
        - !Ref MySubnet2
      SecurityGroups:
        - !Ref MySecurityGroup

  # Target Group
  MyTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200

  # Listener
  MyListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  ClusterName:
    Description: "Nome do Cluster ECS"
    Value: !Ref MyECSCluster
  LoadBalancerDNSName:
    Description: "DNS Name do Load Balancer"
    Value: !GetAtt MyLoadBalancer.DNSName

# Este template cria os seguintes recursos:
# - VPC (Virtual Private Cloud)
# - Subnets
# - Internet Gateway e Route Table para acesso público
# - Security Group para controle de acesso (permitindo HTTP)
# - ECS Cluster
# - Task Definition para definir os containers
# - ECS Service para gerenciar a execução das tarefas
# - Application Load Balancer e Target Group para balanceamento de carga
